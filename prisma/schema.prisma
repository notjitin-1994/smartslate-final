generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Content lesson types supported by the LMS
enum LessonType {
  VIDEO
  TEXT
  QUIZ
  FILE
  EMBED
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AnonymousUserActivity {
  id           String   @id
  anonymousId  String   @unique
  pageViews    Json?
  courseViews  Json?
  interactions Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}

model Course {
  id          String       @id
  title       String
  description String
  slug        String       @unique
  imageUrl    String?
  price       Float?
  duration    String?
  level       String?
  category    String?
  published   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  status      String?
  statusColor String?
  Module      Module[]
  UserCourse  UserCourse[]
}

model Module {
  id          String   @id
  courseId    String
  title       String
  description String?
  order       Int
  content     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Lesson      Lesson[]

  @@index([courseId])
  @@index([courseId, order])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id
  email         String?      @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  company       String?
  stackAuthId   String?      @unique
  passwordHash  String?
  Account       Account[]
  Session       Session[]
  UserCourse    UserCourse[]
  UserRole      UserRole[]
  lessonProgress UserLessonProgress[]
}

model UserCourse {
  id          String    @id
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  progress    Float     @default(0)
  progressPct Int       @default(0)
  Course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

/// Tracks per-lesson completion by user
model UserLessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

/// Lesson content belonging to a Module
model Lesson {
  id          String     @id @default(cuid())
  moduleId    String
  title       String
  type        LessonType
  order       Int
  metadata    Json?
  textContent String?
  videoUrl    String?
  fileUrl     String?
  quizSpec    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime

  Module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userProgress UserLessonProgress[]

  @@index([moduleId])
  @@index([moduleId, order])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model users {
  id            Int       @id @default(autoincrement())
  google_id     String?   @unique @db.VarChar(255)
  full_name     String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  phone_number  String?   @unique @db.VarChar(50)
  password_hash String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
}

/// Stores submissions from the course waitlist modal
model CourseWaitlistLead {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  anonymousId        String?
  courseSlug         String?
  courseName         String?
  name               String
  email              String
  phone              String?
  company            String?
  role               String?
  teamSize           String?
  learningGoals      String
  preferredStartDate String?
  learningFormat     String
  experience         String?
  referralSource     String?
  additionalInfo     String?

  @@index([email])
  @@index([courseSlug])
}

/// Stores submissions from the Solara interest modal (product waitlist)
model SolaraWaitlistLead {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  anonymousId      String?
  name             String
  email            String
  phone            String?
  company          String?
  role             String?
  companySize      String?
  primaryInterest  String
  specificFeatures String[]
  useCase          String?
  timeline         String?
  additionalInfo   String?

  @@index([email])
}

/// Stores submissions from the SSA (Strategic Skills Architecture) modal
model SSAInquiry {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  anonymousId       String?
  name              String
  email             String
  phone             String
  company           String
  role              String
  companySize       String
  industry          String
  currentChallenges String
  timeline          String
  budget            String?
  specificGoals     String
  howDidYouHear     String?

  @@index([email])
}

/// Stores submissions from the Case Study modal
model CaseStudyRequest {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  anonymousId       String?
  name              String
  email             String
  phone             String?
  company           String
  role              String?
  industry          String?
  caseStudyType     String
  specificInterests String[]
  currentChallenges String?
  followUp          String?

  @@index([email])
}

/// Generic capture for Partner/Collaborate modal with dynamic fields
model PartnerInquiry {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  anonymousId  String?
  title        String
  data         Json
  contactEmail String?
  contactName  String?

  @@index([title])
  @@index([contactEmail])
}

/// RBAC: Roles available in the application (config-driven permissions)
model Role {
  id          String     @id @db.VarChar(64)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  UserRole    UserRole[]
}

/// RBAC: Many-to-many mapping of Users to Roles
model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  Role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}
