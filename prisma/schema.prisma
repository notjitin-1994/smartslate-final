generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AnonymousUserActivity {
  id           String   @id
  anonymousId  String   @unique
  pageViews    Json?
  courseViews  Json?
  interactions Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}

model Course {
  id          String       @id
  title       String
  description String
  slug        String       @unique
  imageUrl    String?
  price       Float?
  duration    String?
  level       String?
  category    String?
  published   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  status      String?
  statusColor String?
  Module      Module[]
  UserCourse  UserCourse[]
}

model Module {
  id          String   @id
  courseId    String
  title       String
  description String?
  order       Int
  content     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id
  email         String?      @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  Account       Account[]
  Session       Session[]
  UserCourse    UserCourse[]
}

model UserCourse {
  id          String    @id
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0)
  Course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model users {
  id            Int       @id @default(autoincrement())
  google_id     String?   @unique @db.VarChar(255)
  full_name     String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  phone_number  String?   @unique @db.VarChar(50)
  password_hash String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
}

/// Stores submissions from the course waitlist modal
model CourseWaitlistLead {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  anonymousId         String?

  // Course context (not always backed by a Course record)
  courseSlug          String?
  courseName          String?

  // Contact information
  name                String
  email               String
  phone               String?

  // Professional context
  company             String?
  role                String?
  teamSize            String?

  // Learning preferences
  learningGoals       String
  preferredStartDate  String?
  learningFormat      String

  // Additional
  experience          String?
  referralSource      String?
  additionalInfo      String?

  @@index([email])
  @@index([courseSlug])
}

/// Stores submissions from the Solara interest modal (product waitlist)
model SolaraWaitlistLead {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  anonymousId     String?

  // Contact
  name            String
  email           String
  phone           String?

  // Professional
  company         String?
  role            String?
  companySize     String?

  // Interest
  primaryInterest String
  specificFeatures String[]
  useCase         String?
  timeline        String?

  // Additional
  additionalInfo  String?

  @@index([email])
}

/// Stores submissions from the SSA (Strategic Skills Architecture) modal
model SSAInquiry {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  anonymousId       String?

  // Step 1: Basic Information
  name              String
  email             String
  phone             String
  company           String
  role              String

  // Step 2: Company Context
  companySize       String
  industry          String
  currentChallenges String

  // Step 3: Specific Needs
  timeline          String
  budget            String?
  specificGoals     String
  howDidYouHear     String?

  @@index([email])
}

/// Stores submissions from the Case Study modal
model CaseStudyRequest {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  anonymousId        String?

  // Contact / Professional
  name               String
  email              String
  phone              String?
  company            String
  role               String?
  industry           String?

  // Interest
  caseStudyType      String
  specificInterests  String[]
  currentChallenges  String?
  followUp           String?

  @@index([email])
}

/// Generic capture for Partner/Collaborate modal with dynamic fields
model PartnerInquiry {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  anonymousId String?

  title       String
  data        Json

  contactEmail String?
  contactName  String?

  @@index([title])
  @@index([contactEmail])
}
